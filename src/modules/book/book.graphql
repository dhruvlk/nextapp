directive @isAuthenticated on FIELD_DEFINITION
directive @hasRole(roles: [String]) on FIELD_DEFINITION

type Query {
  book(id:ID!): JSON @isAuthenticated
  books(filter: BookFilter!): BooksResponse @isAuthenticated
}

type Mutation {
  createBook(data: BookInput): BookCreateUpdateDeleteResponse @hasRole(roles: ["ADMIN"])
  updateBook(id: ID!, data: BookUpdateInput): BookCreateUpdateDeleteResponse  @hasRole(roles: ["ADMIN"])
  deleteBook(id: ID!): BookCreateUpdateDeleteResponse  @hasRole(roles: ["ADMIN"])
}

type book{
  id: ID
  bookName: String
  bookAuthor: String
  bookEdition: String
  Review: [Review!]
}

type BookListing {
  id: ID!
  bookName: String
  bookAuthor: String
  bookEdition: String
  noOfCopies: Int
}

input BookInput { 
  bookName: String
  bookAuthor: String
  bookEdition: String
  noOfCopies: Int
}

input BookUpdateInput {
  bookName: String
  bookAuthor: String
  bookEdition: String
  noOfCopies: Int
}

type BookCreateUpdateDeleteResponse {
  message: String,
   data:[book]
}

input BookFilter {
  skip: Int
  limit: Int
  search: String
  sortBy: String
}

type BooksResponse {
  count: Int
  books: [BookListing]
}