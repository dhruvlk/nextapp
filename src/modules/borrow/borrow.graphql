directive @isAuthenticated on FIELD_DEFINITION
directive @hasRole(roles: [String]) on FIELD_DEFINITION

type Query {
  borrows(filter: BorrowFilter!):BorrowResponse @hasRole(roles: ["ADMIN"])
  penalties(filter: penaltyFilter!):PenaltyResponse @hasRole(roles: ["ADMIN"])
}

type Mutation {
  createBorrow(data: BorrowInput!): BorrowBookResponse @hasRole(roles: ["ADMIN"])
  returnBook(data:ReturnBorrowBookInput!): BorrowBookResponse! @hasRole(roles:["ADMIN"])
  payFine(id: ID!):BorrowBookResponse! @isAuthenticated
}

input BorrowFilter {
  skip: Int
  limit: Int
  search: String
  sortBy: String
}

input penaltyFilter {
  skip: Int
  limit: Int
  search: String
  sortBy: String
}

type BorrowBookResponse {
  message: String
}

input BorrowInput { 
  issueDate: Date
  bookId: ID
  userId:ID
}

input ReturnBorrowBookInput {
	userId:ID!
	bookId:ID!
	returnDate:Date
}

type BorrowListing {
  id: ID!
  issueDate: Date
  returnDate: Date
  expiryDate: Date
}

type PenaltyListing {
  id: ID
  borrowId: ID
  fineAmount: Int
}

type BorrowResponse {
  count: Int
  borrows: [BorrowListing]
}

type PenaltyResponse {
  count: Int
  penalties: [PenaltyListing]
}